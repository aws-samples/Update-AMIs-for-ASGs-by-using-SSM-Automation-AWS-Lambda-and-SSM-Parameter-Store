AWSTemplateFormatVersion: '2010-09-09'

Description: This template creates a VPC with two public and private subnets and
  an autoscaling group with a target tracking policy. Apache Web Server.

Parameters:
  VPCCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  VPCPubSub1CIDR:
    Default: 10.0.1.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String

  VPCPubSub2CIDR:
    Default: 10.0.2.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String

  VPCPriSub1CIDR:
    Default: 10.0.3.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 1
    Type: String

  VPCPriSub2CIDR:
    Default: 10.0.4.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 2
    Type: String

  CPUPolicyTargetValue:
    Default: 80
    Description: Please enter the target CPU utilization
    Type: String

  LaunchTemplateVersionNumber:
    Default: 1
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #Create Public Subnets
  VPCPubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref VPCPubSub1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PubSub1
      VpcId: !Ref VPC

  VPCPubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref VPCPubSub2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PubSub2
      VpcId: !Ref VPC

  #Create Route Table
  VPCPubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PubRT:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref VPCPubRT

  #Create NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref VPCPubSub1

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  #Create Private Subnets
  VPCPriSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref VPCPriSub1CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  VPCPriSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref VPCPriSub2CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  #Create Private Route Table
  VPCPriRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PriRT:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref VPCPriRT

  #Associate Subnets
  VPCPubSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPubRT
      SubnetId: !Ref VPCPubSub1

  VPCPubSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPubRT
      SubnetId: !Ref VPCPubSub2

  VPCPriSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPriRT
      SubnetId: !Ref VPCPriSub1

  VPCPriSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCPriRT
      SubnetId: !Ref VPCPriSub2

#Create LoadBalancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref VPCPubSub1
        - !Ref VPCPubSub2

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC


#Create Load Balancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1  # All protocols
          FromPort: -1    # All ports
          ToPort: -1      # All ports
          CidrIp: 127.0.0.1/32

#Create Web Security Group
  WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open HTTP (port 80) 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  #Create Instance Profile
  ssmEc2instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref ssmEc2Role
      Roles:
        - !Ref ssmEc2Role

  #Create Instance Role
  ssmEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      RoleName: SSMManagedInstanceRole
      Description: Allows EC2 instances to call AWS services like CloudWatch and
        Systems Manager on your behalf
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  #Create Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: amiLambdaRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Automation-UpdateSsmParam:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Automation-UpdateSsmParam:*'
        - PolicyName: SSMParameterStorePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/latestAmi'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages'
                  - 'ssm:DescribeParameters'
                Resource: '*'

  #Create Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-for-auto-scaling
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref ssmEc2instanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !Ref WebSG
            DeleteOnTermination: true
        Placement:
          Tenancy: default
        ImageId: ami-0f9fc25dd2506cf6d
        InstanceType: t2.micro
        BlockDeviceMappings:
         - DeviceName: /dev/xvda
           Ebs:
             Encrypted: true
             VolumeSize: 8
             VolumeType: gp2
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          amazon-linux-extras install epel -y
          yum install stress -y

  #Create AutoScaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '2'
      MaxSize: '5'
      DesiredCapacity: '3'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !Ref LaunchTemplateVersionNumber
      VPCZoneIdentifier:
        - !Ref VPCPriSub1
        - !Ref VPCPriSub2
      TargetGroupARNs:
        - !Ref TargetGroup

  #AutoScaling Group Tracking Policy
  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue